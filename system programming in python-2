using pipes with subprocess.popen()

As we have said above, it is also possible to catch the output from the shell command or shell script into Python. To do this, we have to set the optional parameter stdout of Popen() to subprocess.PIPE:

>>> process = subprocess.Popen(['ls','-l'], stdout=subprocess.PIPE)

>>> print process.stdout.read()

better to use sub.Popen([],stdout=sub.PIPE,shell=False) so that you can kill the procs later, other wise their fricking immortal

fix for the immortal cmds
while declaring the process, assign it to a handle 
handle = sub.Popen(......)
then 
handle.wait()
because i swear handle.terminate() or handle.kill(0 dont work for shit.

